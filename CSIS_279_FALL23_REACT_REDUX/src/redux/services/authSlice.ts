import { apiSlice } from "./apiSlice";


type RegistrationData = {
    username: string,
    email: string,
    password: string
}

type LoginData = {
    email: string,
    password: string
}

interface ApiResponseSuccess {
    data: {
      access_token: string;
    };
    message: string;
}

interface ApiError {
    error: {
      status: number,
      data: {
        error: string,
        message: string,
        statusCode: number
      }
    }
}

type ApiResponse = ApiResponseSuccess | ApiError;  

export const authSlice = apiSlice.injectEndpoints({
    endpoints: (builder) => ({
        registerUser: builder.mutation<ApiResponse, RegistrationData>({
            query: (userData) => ({
                url: '/auth/register',
                method: "POST",
                body: userData
            }),
            invalidatesTags: ["Users"] // to update data in the cache
        }),

        loginUser: builder.mutation<ApiResponse, LoginData>({
            query: (userData) => ({
                url: '/auth/login',
                method: "POST",
                body: userData
            }),
        }),

    })
})

// hooks generated by redux to send api requests inside components
export const {useLoginUserMutation, useRegisterUserMutation} = authSlice